package com.mycompany.views;

import com.mycompany.ilib.DAOUsersImpl;
import com.mycompany.interfaces.DAOUsers;
import java.awt.Color;
import java.io.IOException;
import java.io.InputStream;
import java.util.Calendar;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.mail.AuthenticationFailedException;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.util.ByteArrayDataSource;
import javax.swing.JOptionPane;

public class UpUsers extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private String email;
    private String subject;
    private String message;
    static String codigo = "";
    boolean isEdition = false;
    com.mycompany.models.Users userEdition;

    public UpUsers() {
        initComponents();
        InitStyles();
    }

    public UpUsers(com.mycompany.models.Users user) {
        initComponents();
        isEdition = true;
        userEdition = user;
        InitStyles();
    }

    private void InitStyles() {
        title.putClientProperty("FlatLaf.styleClass", "h1");
        title.setForeground(Color.black);
        nameTxt.putClientProperty("JTextField.placeholderText", "Ingrese el nombre del usuario.");
        apPTxt.putClientProperty("JTextField.placeholderText", "Ingrese el apellido paterno del usuario.");
        apMTxt.putClientProperty("JTextField.placeholderText", "Ingrese el apellido materno del usuario.");
        domTxt.putClientProperty("JTextField.placeholderText", "Ingrese el domicilio del usuario.");
        phoneTxt.putClientProperty("JTextField.placeholderText", "Ingrese el correo electronico del usuario.");

        if (isEdition) {
            title.setText("Editar Usuario");
            button.setText("Guardar");
            

            if (userEdition != null) {
                nameTxt.setText(userEdition.getName());
                apPTxt.setText(userEdition.getLast_name_p());
                apMTxt.setText(userEdition.getLast_name_m());
                domTxt.setText(userEdition.getDomicilio());
                phoneTxt.setText(userEdition.getTel());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        nameLbl = new javax.swing.JLabel();
        nameTxt = new javax.swing.JTextField();
        apPLbl = new javax.swing.JLabel();
        apPTxt = new javax.swing.JTextField();
        apMLbl = new javax.swing.JLabel();
        apMTxt = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        domLbl = new javax.swing.JLabel();
        domTxt = new javax.swing.JTextField();
        button = new javax.swing.JButton();
        phoneLbl = new javax.swing.JLabel();
        phoneTxt = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        bg.setBackground(new java.awt.Color(255, 255, 255));

        title.setText("Registrar nuevo Usuario");

        nameLbl.setText("Nombre");

        nameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTxtActionPerformed(evt);
            }
        });
        nameTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameTxtKeyTyped(evt);
            }
        });

        apPLbl.setText("Apellido Paterno");

        apPTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                apPTxtKeyTyped(evt);
            }
        });

        apMLbl.setText("Apellido Materno");

        apMTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                apMTxtKeyTyped(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(204, 204, 204));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(200, 10));

        domLbl.setText("Domicilio");

        domTxt.setToolTipText("");

        button.setBackground(new java.awt.Color(18, 90, 173));
        button.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        button.setForeground(new java.awt.Color(255, 255, 255));
        button.setText("Registrar");
        button.setBorderPainted(false);
        button.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionPerformed(evt);
            }
        });

        phoneLbl.setText("Correo electronico");

        phoneTxt.setToolTipText("");
        phoneTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneTxtActionPerformed(evt);
            }
        });
        phoneTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phoneTxtKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(nameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(223, 223, 223))
                            .addComponent(nameTxt)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(apPLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(182, 182, 182))
                            .addComponent(apPTxt)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(apMLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(180, 180, 180))
                            .addComponent(apMTxt))
                        .addGap(68, 68, 68)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(domTxt)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(domLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(220, 220, 220))
                            .addComponent(phoneTxt)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(phoneLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(218, 218, 218))
                            .addComponent(button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(72, 72, 72))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(553, 553, 553))))
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(nameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(apPLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(apPTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(apMLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(apMTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6))
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(domLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(domTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(phoneLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(phoneTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(164, 164, 164))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(26, 26, 26))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonActionPerformed
        String nombre = nameTxt.getText();
        String apP = apPTxt.getText();
        String apM = apMTxt.getText();
        String dom = domTxt.getText();
        String tel = phoneTxt.getText();
        if (contieneDominio(tel)) {
            // Validaciones para los campos
            if (nombre.isEmpty() || apP.isEmpty() || apM.isEmpty() || dom.isEmpty() || tel.isEmpty()) {
                javax.swing.JOptionPane.showMessageDialog(this, "Debe llenar todos los campos. \n", "AVISO", javax.swing.JOptionPane.ERROR_MESSAGE);
                nameTxt.requestFocus();
                return;
            }
            codigo = new Random().ints(6, 0, 10)
                    .mapToObj(String::valueOf)
                    .reduce("", String::concat);

            email = tel;
            subject = nombre + " " + apP + " " + " " + apM;
            message = "ESTE ES EL CODIGO PARA INICIO DE SESION: \n " + codigo;
            try {
                sendEmail(0);
                // Mostrar un cuadro de diálogo para que el usuario ingrese un código
            } catch (IOException ex) {
                Logger.getLogger(UpUsers.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(UpUsers.class.getName()).log(Level.SEVERE, null, ex);
            }

            String inputCode = JOptionPane.showInputDialog(null, "Ingrese el código:");

            // Verificar que se haya ingresado un código
            if (inputCode != null && !inputCode.trim().isEmpty()) {
                // Comparar el código ingresado con el código predefinido
                boolean confirmacion = false;
                for (int i = 0; i < 2; i++) {
                    if (!inputCode.equals(codigo)) {
                        JOptionPane.showMessageDialog(null, "Código incorrecto. Por favor, verifique el código.", "Error", JOptionPane.ERROR_MESSAGE);
                        inputCode = JOptionPane.showInputDialog(null, "Ingrese el código:");

                    } else {
                        confirmacion = true;
                        break;
                    }
                }

                if (confirmacion) {

                    JOptionPane.showMessageDialog(null, "Código correcto.");
                    com.mycompany.models.Users user = isEdition ? userEdition : new com.mycompany.models.Users();
                    user.setName(nombre);
                    user.setLast_name_p(apP);
                    user.setLast_name_m(apM);
                    user.setDomicilio(dom);
                    user.setTel(tel);
                    user.setPassword(".");
                    user.setRole(".");

                    try {
                        DAOUsers dao = new DAOUsersImpl();

                        if (!isEdition) {
                            dao.registrar(user);
                        } else {
                            dao.modificar(user);
                        }

                        String successMsg = isEdition ? "modificado" : "registrado";

                        javax.swing.JOptionPane.showMessageDialog(this, "Usuario " + successMsg + " exitosamente.\n", "AVISO", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        
                        if (!isEdition) {
                            nameTxt.setText("");
                            apPTxt.setText("");
                            apMTxt.setText("");
                            domTxt.setText("");
                            phoneTxt.setText("");
                        }
                        
                        List <com.mycompany.models.Users> list = dao.listar("",0,0);
                        String id =  list.get(list.size()-1).getId()+"";
                        javax.swing.JOptionPane.showMessageDialog(this, "el ID de tu usuario es el siguiente "+id+"\n", "AVISO", javax.swing.JOptionPane.ERROR_MESSAGE);
                        sendEmail(1);
                        
                        
                    } catch (Exception e) {
                        String errorMsg = isEdition ? "modificar" : "registrar";
                        javax.swing.JOptionPane.showMessageDialog(this, "Ocurrió un error al " + errorMsg + " el usuario. \n", "AVISO", javax.swing.JOptionPane.ERROR_MESSAGE);
                        System.out.println(e.getMessage());
                    }
                    
                } else {
                    // Mostrar un mensaje de error si los códigos no coinciden
                    JOptionPane.showMessageDialog(null, "Código incorrecto. Por favor, verifique el código.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // Mostrar un mensaje de error si no se ingresó ningún código
                JOptionPane.showMessageDialog(null, "No se ingresó ningún código. Por favor, inténtelo de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_buttonActionPerformed

    private void phoneTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneTxtActionPerformed


    private void phoneTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneTxtKeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_phoneTxtKeyTyped

    private void apMTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apMTxtKeyTyped
        // TODO add your handling code here:char c = evt.getKeyChar();
        char c = evt.getKeyChar();
        if (Character.isDigit(c)) {
            evt.consume();  // Ignorar la entrada de caracteres no deseados
        }

    }//GEN-LAST:event_apMTxtKeyTyped

    private void apPTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apPTxtKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (Character.isDigit(c)) {
            evt.consume();  // Ignorar la entrada de caracteres no deseados
        }
    }//GEN-LAST:event_apPTxtKeyTyped

    private void nameTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTxtKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (Character.isDigit(c)) {
            evt.consume();  // Ignorar la entrada de caracteres no deseados
        }
    }//GEN-LAST:event_nameTxtKeyTyped

    private void nameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTxtActionPerformed
    
    public String mensajeHTML(){
        return  "<h1 style='color: #0047AB;'>Reporte de la Biblioteca Trinity</h1>"
                    + "<p>Estimado/a usuario/a "+subject+ "</p>"
                    + "<p>Este es el codigo de autentificacion para agregar su Usuario.</p>"
                    +"<p>"+message+"<p>"
                    + "<p>¡Gracias por su colaboración!</p>"
                    + "<p>Atentamente,<br/>"
                    + "Biblioteca Trinity</p>"
                    + "© 2024 Biblioteca Trinity. Todos los derechos reservados</p>"
                    + "<p><img src='cid:logo' alt='Logo Biblioteca'></p>"
                    + "<hr/>"
                    + "<p style='font-size: 10px; color: #666;'>© " + Calendar.getInstance().get(Calendar.YEAR) + " Biblioteca Trinity. Todos los derechos reservados.</p>";
    }
    public String mensajeHTMLID() throws Exception{
        DAOUsers dao = new DAOUsersImpl();
        List <com.mycompany.models.Users> list = dao.listar("",0,0);
                        String id =  list.get(list.size()-1).getId()+"";
        
        return  "<h1 style='color: #0047AB;'>Reporte de la Biblioteca Trinity</h1>"
                    + "<p>Estimado/a usuario/a "+subject+ "</p>"
                    + "<p>Este es su Id de Usuario.</p>"
                    +"<p>"+id+"<p>"
                    + "<p>¡Gracias por su colaboración!</p>"
                    + "<p>Atentamente,<br/>"
                    + "Biblioteca Trinity</p>"
                    + "© 2024 Biblioteca Trinity. Todos los derechos reservados</p>"
                    + "<p><img src='cid:logo' alt='Logo Biblioteca'></p>"
                    + "<hr/>"
                    + "<p style='font-size: 10px; color: #666;'>© " + Calendar.getInstance().get(Calendar.YEAR) + " Biblioteca Trinity. Todos los derechos reservados.</p>";
    }
    public void sendEmail(int index) throws IOException, Exception {
        // Configuración de las propiedades para la conexión con el servidor SMTP
        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.gmail.com"); // Cambia "smtp.example.com" por tu servidor SMTP
        props.put("mail.smtp.port", "587"); // Puerto SMTP
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");

        // Credenciales de autenticación
        String username = "bibliotecatrinity0@gmail.com"; // Cambia por tu dirección de correo electrónico
        String password = "srus nnqo tjng hvkf"; // Cambia por tu contraseña

        // Creación de la sesión
        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {
            protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
                return new javax.mail.PasswordAuthentication(username, password);
            }
        });

        try {
            // Creación del mensaje
            MimeMessage emailMessage = new MimeMessage(session);
            emailMessage.setFrom(new InternetAddress(username));
            emailMessage.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));
            emailMessage.setSubject(subject);
            String htmlContent = index == 0 ? mensajeHTML() : mensajeHTMLID(); 

            // Adjuntar el archivo PDF al mensaje
            MimeBodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart.setContent(htmlContent, "text/html; charset=utf-8");

            // Adjuntar la imagen del logo
            MimeBodyPart imagePart = new MimeBodyPart();
            // Cargar la imagen desde el classpath
            InputStream logoStream = getClass().getResourceAsStream("/images/logo.png");
            if (logoStream == null) {
                System.err.println("No se pudo encontrar el archivo logo.png");
                return;
            }
            DataSource fds = new ByteArrayDataSource(logoStream, "image/png");
            imagePart.setDataHandler(new DataHandler(fds));
            imagePart.setHeader("Content-ID", "<logo>");
            imagePart.setDisposition(MimeBodyPart.INLINE);

            // Crear el multipart para el cuerpo del mensaje
            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(messageBodyPart);
            multipart.addBodyPart(imagePart);
            emailMessage.setContent(multipart);

            // Envío del mensaje
            Transport.send(emailMessage);
            
            
        JOptionPane.showMessageDialog(null, "Correo electrónico enviado correctamente.");


        } catch (AuthenticationFailedException ex) {
            JOptionPane.showMessageDialog(null, "Error de autenticación al enviar el correo electrónico: " + ex.getMessage());
        } catch (MessagingException ex) {
            JOptionPane.showMessageDialog(null, "Error al enviar el correo electrónico: " + ex.getMessage());
        }
    }

    public static boolean contieneDominio(String correo) {

        if (!(correo.contains("@gmail.com") || correo.contains("@outlook.com") || correo.contains("@itoaxaca.edu.mx"))) {
            JOptionPane.showMessageDialog(null, "tu correo no contiene algun dominio conocido \n prueba de nueva cuenta");
        }
        return correo.contains("@gmail.com") || correo.contains("@outlook.com") || correo.contains("@itoaxaca.edu.mx");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel apMLbl;
    private javax.swing.JTextField apMTxt;
    private javax.swing.JLabel apPLbl;
    private javax.swing.JTextField apPTxt;
    private javax.swing.JPanel bg;
    private javax.swing.JButton button;
    private javax.swing.JLabel domLbl;
    private javax.swing.JTextField domTxt;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JLabel phoneLbl;
    private javax.swing.JTextField phoneTxt;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
